package mc322.lab05;

public class Peca {
	private Peca Es = null; // ESQUERDA SUPERIOR
	private Peca Ei = null; // ESQUERDA INFERIOR
	private Peca Ds = null; // DIREITA SUPERIOR
	private Peca Di = null; // DIREITA INFERIOR
	private int Cor;  // 0 =  PRETA | 1 = BRANCA 
	private int Ocupado; // 0 = VAZIU | 1 = OCUPADO
	private int Xp; // coordenada X 0<=Xp<=7
	private int Yp; // coordenada Y 0<=Yp<=7
	// CONSTRUTOR:
	public Peca() {}
	
//-----------------------------------------------------------------------------------------------------------------------------------
	public Peca getEs() {
		return Es;
	}
	public void setEs(Peca es) {
		Es = es;
	}
	public Peca getEi() {
		return Ei;
	}
	public void setEi(Peca ei) {
		Ei = ei;
	}
	public Peca getDs() {
		return Ds;
	}
	public void setDs(Peca ds) {
		Ds = ds;
	}
	public Peca getDi() {
		return Di;
	}
	public void setDi(Peca di) {
		Di = di;
	}
	public int getCor() {
		return Cor;
	}
	public void setCor(int cor) {
		this.Cor = cor;
	}
	public int getOcupado() {
		return Ocupado;
	}
	public void setOcupado(int ocupado) {
		this.Ocupado = ocupado;
	}
	public int getXp() {
		return Xp;
	}
	public void setXp(int xp) {
		Xp = xp;
	}
	public int getYp() {
		return Yp;
	}
	public void setYp(int yp) {
		Yp = yp;
	}
//-----------------------------------------------------------------------------------------------------------------------------------
	
	public void atribui(int linha, int coluna, int ocupado, int cor){
		setYp(linha);
		setXp(coluna);
		setOcupado(linha);
		setCor(cor);
	}
	
	public static void conectaP(Peca p[][]) {

		for(int linha=0 ; linha<8 ; linha++ ) {
			for(int coluna=0 ; coluna<8 ; linha++) {
				if (linha == 0 ) {
					if (coluna == 0 ) { // Entra se for canto inferior esquerdo
						p[linha][coluna].Ds = p[linha+1][coluna+1];
					}
					else if( coluna == 7) { //entra se for canto inferior direito
						p[linha][coluna].Es = p[linha+1][coluna-1];
					}
					else {
						p[linha][coluna].Es = p[linha+1][coluna-1];
						p[linha][coluna].Ds = p[linha+1][coluna+1];
					}
				}
				else if (linha == 7) {
					if (coluna == 0) { //entra se for canto superior esquerdo
						p[linha][coluna].Di = p[linha-1][coluna+1];
					}
					else if(coluna == 7) { //entra se for canto superior direito
						p[linha][coluna].Ei = p[linha-1][coluna-1];
					}
					else {
						p[linha][coluna].Ei = p[linha-1][coluna-1];
						p[linha][coluna].Di = p[linha-1][coluna+1];
					}
				}
				else {
					p[linha][coluna].Es = p[linha+1][coluna-1];
					p[linha][coluna].Ei = p[linha-1][coluna-1];
					p[linha][coluna].Ds = p[linha+1][coluna+1];
					p[linha][coluna].Di = p[linha-1][coluna+1];
				}
			}
		}
	}

	public boolean Verificamovimento(Peca p[][], int Yp, int Xp, int Yj, int Xj ) {
		if (Yp<Yj) { //ANDA PRA CIMA
			if (Yj-Yp==1) { // MOVIMENTO NORMAL (NÃO COME)
				if( Xp > Xj ) {// MOVIMETO TOTAL : NORMAL PARA ESQUERDA SUPERIOR
				}
			}
		}
	
			if (p[Yp][Xp].Ocupado == 1) {
				if(p[Yj][Xj].Ocupado == 0) {
					
				}
			}
		
		return true;
	}

}
	